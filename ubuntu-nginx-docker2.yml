AWSTemplateFormatVersion: 2010-09-09

Description: >
  This Cloudformation Template creates a Docker machine on EC2 Instance. 
  Docker Machine will run on Amazon Linux 2 (ami-026dea5602e368e96) EC2 Instance with
  custom security group allowing SSH connections from anywhere on port 22.

Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must one of the existing EC2 KeyPair
  DomainName:
    Type: AWS::Route53::HostedZone::Id
    Description: The DNS name of an existing Amazon Route 53 hosted zone e.g. westerops.com
  FullDomainFrontend:
    Type: String
    Description: The full domain name e.g. phonebook.westerops.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
    Default: sonarqube.mehmetafsar.net
  PortFrontend:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    ConstraintDescription: must be a valid .
    Default: 9000
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
    Default: drmehmet@gmail.com
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t3.small
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

Resources:
  DockerMachineSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH for Docker Machine
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  DockerMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        
  DockerMachineInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref DockerMachineRole

  DockerMachine:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e472ba40eb589f49
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref DockerMachineInstanceProfile
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt DockerMachineSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub  ${AWS::StackName}   
      UserData:
        Fn::Base64: 
          !Sub |
            #! /bin/bash -xe
            apt update -y
            apt install docker.io -y
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ubuntu
            # install docker-compose
            curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            cd /home/ubuntu
            mkdir -p /srv/docker/keycloak/data/certs/
            cd /srv/docker/keycloak/data/certs/
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout keycloak.key -out keycloak.crt -subj "/C=US/ST=California/L=San Francisco/O=Keycloak/OU=Keycloak/CN=${FullDomainFrontend}"
            chmod 755 /srv/docker/keycloak/data/certs/keycloak.*
            git clone https://github.com/mehmetafsar510/sonarqube.git
            cd sonarqube
            docker-compose up -d
            
            
  SERVERIP:
    Type: AWS::EC2::EIP
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'DockerMachine'
      EIP: !Ref 'SERVERIP'
  
  myDNSRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref DomainName
      Name: !Ref FullDomainFrontend
      ResourceRecords: 
      - !Ref SERVERIP
      TTL: 900
      Type: A



Outputs:
  WebsiteFrontendURL:
    Description: Docker Machine DNS Name
    Value: !Sub 
      - https://${PublicAddress}
      - PublicAddress: !Ref FullDomainFrontend
  WebsitePublicURL:
    Description: Docker Machine DNS Name
    Value: !Sub 
      - https://${PublicAddress}:9000
      - PublicAddress: !Getatt DockerMachine.PublicIp
